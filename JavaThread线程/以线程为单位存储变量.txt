2. ThreadLocal 变量
如果您想为一个类的所有实例维持一个变量的实例，将会用到静态类成员变量。
如果您想以线程为单位维持一个变量的实例，将会用到线程局部变量。
ThreadLocal 变量与常规变量的不同之处在于，每个线程都有其各自初始化的变量实例，这通过 get() 或 set() 方法予以评估。
比方说您在开发一个多线程代码跟踪器，其目标是通过您的代码惟一标识每个线程的路径。
挑战在于，您需要跨多个线程协调多个类中的多个方法。如果没有 ThreadLocal，这会是一个复杂的问题。
当一个线程开始执行时，它需要生成一个惟一的令牌来在跟踪器中识别它，然后将这个惟一的令牌传递给跟踪中的每个方法。
使用 ThreadLocal，事情就变得简单多了。线程在开始执行时初始化线程局部变量，
然后通过每个类的每个方法访问它，保证变量将仅为当前执行的线程托管跟踪信息。
在执行完成之后，线程可以将其特定的踪迹传递给一个负责维护所有跟踪的管理对象。
当您需要以线程为单位存储变量实例时，使用 ThreadLocal 很有意义。